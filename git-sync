#!/usr/bin/env bash

# Colors
NORMAL=$(printf '\33[0m')
RED=$(printf '\33[31m')
BRIGHT_RED=$(printf '\33[31;1m')
GREEN=$(printf '\33[32m')
BRIGHT_GREEN=$(printf '\33[32;1m')

COMMITTER_NAME="Git Synchronizer"
COMMITTER_EMAIL="synchronizer@git-sync.org"

IGNORE_FILE=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)/ignore
SYNC_FILE="./.git-sync"

DEBOUNCE_TIMEOUT=1

SYNCING=false

function git_sync {
    local now=$(date --iso-8601=seconds)

    git diff --exit-code HEAD > /dev/null; if [ $? -eq 0 ]; then
        # No differences since last commit.
        return
    fi

    GIT_COMMITTER_NAME=${COMMITTER_NAME} GIT_COMMITTER_EMAIL=${COMMITTER_EMAIL} \
            git commit --allow-empty -am "WIP - ${now}" > /dev/null; if [ $? -ne 0 ]; then
        # Commit did not succeed.
        return $?
    fi
    SYNCING=true

    local tree_hash=$(git log -1 --format="%T")
    if [ "$(cat ${SYNC_FILE} 2> /dev/null)" != ${tree_hash} ]; then
        printf '%s' "${GREEN}Syncing... ${NORMAL}"
        git push -f 2> /dev/null || return $?
        printf '%s\n' "${BRIGHT_GREEN}Done: ${now}${NORMAL}"
    fi

    git reset HEAD^ > /dev/null && echo ${tree_hash} > ${SYNC_FILE}
    SYNCING=false
}

function inotifywait_timeout {
    local timeout=$1
    [ -z ${timeout} ] && timeout=-1

    inotifywait -rqq --exclude \.git --fromfile ${IGNORE_FILE} --event modify --timeout ${timeout} .
}

function inotifywait_debounce {
    local timeout=$1
    [ -z ${timeout} ] && timeout=-1

    inotifywait_timeout
    while [ $? -eq 0 ]; do
        inotifywait_timeout ${timeout}
    done
    return 0
}

function unsync {
    local ec=$?

    printf '\n%s' "${RED}Unsyncing... ${NORMAL}"
    if [ ${SYNCING} = true ]; then
        git reset HEAD^ > /dev/null
    fi
    git push -f 2> /dev/null && rm -f ${SYNC_FILE}
    printf '%s\n' "${BRIGHT_RED}Done${NORMAL}"

    exit ${ec}
}

function main {
    trap unsync SIGHUP SIGINT SIGTERM
    git_sync
    while :; do
        inotifywait_debounce ${DEBOUNCE_TIMEOUT}
        git_sync
    done
}


main
